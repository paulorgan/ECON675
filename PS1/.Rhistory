# set working director
setwd('C:/Users/prorgan/Box/Classes/Econ 672')
# clear workspace
rm(list = ls())
# for syntax
require(dplyr)
require(magrittr)
require(tidyr)
# for data reading
require(foreign)
# for regressions
reqiure(ivpack)
install.packages('ivpack')
install.packages('AER')
require(AER)
setwd('C:/Users/prorgan/Box/Classes/Econ 672')
# clear workspace
rm(list = ls())
# for syntax
require(dplyr)
require(magrittr)
require(tidyr)
# for data reading
require(foreign)
# for regressions
require(ivpack)
require(AER)
# load data
df <- read.dta('card.dta')
a <- lm(lwage ~ educ + exper + expersq + black + south + smsa +
reg661 + reg662 + reg663 + reg664 + reg665 + reg666 + reg667 + reg668
+ smsa66, df)
summary(a)
b <- lm(lwage ~ educ + exper + expersq + black + south + smsa +
reg661 + reg662 + reg663 + reg664 + reg665 + reg666 + reg667 + reg668
+ smsa66 + nearc4, df)
summary(b)
c <- ivreg(lwage ~ educ + exper + expersq + black + south + smsa +
reg661 + reg662 + reg663 + reg664 + reg665 + reg666 + reg667 + reg668
+ smsa66 | nearc4 + exper + expersq + black + south + smsa +
reg661 + reg662 + reg663 + reg664 + reg665 + reg666 + reg667 + reg668
+ smsa66, df)
knitr::opts_chunk$set(echo = TRUE)
c <- ivreg(lwage ~ educ + exper + expersq + black + south + smsa +
reg661 + reg662 + reg663 + reg664 + reg665 + reg666 + reg667 + reg668
+ smsa66 | nearc4 + exper + expersq + black + south + smsa +
reg661 + reg662 + reg663 + reg664 + reg665 + reg666 + reg667 + reg668
+ smsa66, data = df)
knitr::opts_chunk$set(echo = TRUE)
summary(c)
b <- lm(lwage ~ educ + exper + expersq + black + south + smsa +
reg661 + reg662 + reg663 + reg664 + reg665 + reg666 + reg667 + reg668
+ smsa66 + nearc4, df)
summary(b)
knitr::opts_chunk$set(echo = TRUE)
summary(lm(educ ~ nearc2, df))
summary(lm(educ ~ nearc4, df))
summary(lm(educ ~ nearc2, df))
summary(lm(educ ~ nearc4, df))
knitr::opts_chunk$set(echo = TRUE)
d3 <- ivreg(lwage ~ educ + exper + expersq + black + south + smsa +
reg661 + reg662 + reg663 + reg664 + reg665 + reg666 + reg667 + reg668
+ smsa66 | nearc2 + nearc4 + exper + expersq + black + south + smsa +
reg661 + reg662 + reg663 + reg664 + reg665 + reg666 + reg667 + reg668
+ smsa66, data = df)
summary(d3)
knitr::opts_chunk$set(echo = TRUE)
c <- ivreg(lwage ~ educ + exper + expersq + black + south + smsa +
reg661 + reg662 + reg663 + reg664 + reg665 + reg666 + reg667 + reg668
+ smsa66 | nearc4 + exper + expersq + black + south + smsa +
reg661 + reg662 + reg663 + reg664 + reg665 + reg666 + reg667 + reg668
+ smsa66, data = df)
summary(c)
knitr::opts_chunk$set(echo = TRUE)
summary(lm(iq ~ nearc4, df))
knitr::opts_chunk$set(echo = TRUE)
e <- lm(iq ~ nearc4, df)
summary(e)
knitr::opts_chunk$set(echo = TRUE)
f <- lm(iq ~ nearc4 + smsa66 + reg661 + reg662 + reg669, df)
knitr::opts_chunk$set(echo = TRUE)
summary(f)
require(stargazer)
knitr::opts_chunk$set(echo = TRUE)
stargazer(a, b, c, d)
knitr::opts_chunk$set(echo = TRUE)
stargazer(a, b, c, d3)
knitr::opts_chunk$set(echo = TRUE)
stargazer(a, b)
require(xtable)
knitr::opts_chunk$set(echo = TRUE)
xtable(a, b)
knitr::opts_chunk$set(echo = TRUE)
b1 <- lm(educ ~ + exper + expersq + black + south + smsa + reg661 +
reg662 + reg663 + reg664 + reg665 + reg666 + reg667 + reg668
+ smsa66, df)
b2 <- lm(educ ~ + exper + expersq + black + south + smsa + reg661 +
reg662 + reg663 + reg664 + reg665 + reg666 + reg667 + reg668
+ smsa66 + nearc4, df)
summary(b1)
summary(b2)
?stargazer
View(c)
gc()
install.packages('kableExtra')
# for table formatting
require(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
setwd('C:/Users/prorgan/Dropbox/Hanlon Hoopes Slemrod/code/paul')
# we will specify factors explicitly if needed
options(stringsAsFactors = F)
# for table formatting
require(kableExtra)
source('regressions.R')
kable(t1) %>% kable_styling()
kable(t2) %>% kable_styling()
kable(t2)
gc()
install.packages(c("anytime", "bit", "broom", "callr", "data.table", "DBI", "dplyr", "ff", "foreign", "Formula", "ggplot2", "ggthemes", "haven", "highr", "htmlTable", "htmlwidgets", "installr", "lfe", "lubridate", "MASS", "mgcv", "modelr", "munsell", "openxlsx", "pander", "pillar", "pixiedust", "psych", "purrr", "quantreg", "Rcpp", "readxl", "reprex", "rlang", "rmarkdown", "skimr", "sp", "stargazer", "stringi", "stringr", "survival", "tidyr", "utf8", "yaml", "zoo"))
knitr::opts_chunk$set(echo = TRUE)
setwd('C:/Users/prorgan/Dropbox/Hanlon Hoopes Slemrod/code/paul')
# we will specify factors explicitly if needed
options(stringsAsFactors = F)
source('regressions.R')
kable(t1)
# for tables
require(pander)
kable(t1)
panderOptions
panderOptions()
knitr::opts_chunk$set(echo = TRUE)
setwd('C:/Users/prorgan/Dropbox/Hanlon Hoopes Slemrod/code/paul')
# we will specify factors explicitly if needed
options(stringsAsFactors = F)
# for tables
require(pander)
panderOptions('digits', 2)
panderOptions('big.mark',',')
panderOptions('keep.trailing.zeros',T)
panderOptions('table.alignment.default', function(df)
ifelse(sapply(df, is.numeric), 'right', 'left'))
panderOptions('table.alignment.rownames', 'left')
pander(t1)
knitr::opts_chunk$set(echo = TRUE)
setwd('C:/Users/prorgan/Dropbox/Hanlon Hoopes Slemrod/code/paul')
# we will specify factors explicitly if needed
options(stringsAsFactors = F)
# for tables
require(pander)
panderOptions('digits', 2)
panderOptions('big.mark',',')
panderOptions('keep.trailing.zeros',T)
panderOptions('table.alignment.default', function(df)
ifelse(sapply(df, is.numeric), 'right', 'left'))
panderOptions('table.alignment.rownames', 'left')
panderOptions('table.split.table', Inf)
source('regressions.R')
require(memisc)
install.packages('memisc')
require(memisc)
b_table <- mtable(b1, b2)
pander(b_table)
t4 <- stargazer(b1, b2,
align = T, dep.var.labels = 'Firm Issued TCJA-tied Announcement',
no.space = T, type= 'html', style = 'ajs')
t4 <- stargazer(b1, b2,
align = T, dep.var.labels = 'Firm Issued TCJA-tied Announcement',
no.space = T, type= 'html', style = 'ajs')
t4 <- stargazer(b1, b2)
kable(t4)
install.packages('matlib')
?pnorm
###############################################################################
# Author: Paul R. Organ
# Purpose: ECON 675, PS1
# last Update: Sept 17, 2018
###############################################################################
# Preliminaries
options(stringsAsFactors = F)
# packages
require(tidyverse)
require(magrittr)
require(xtable) # for table output
require(perm) # permutation tests
require(pwr) # power calculatoins
require(ggplot2) # plots
select = dplyr::select
setwd('C:/Users/prorgan/Box/Classes/Econ 675/Problem Sets/PS1')
###############################################################################
# read in data
df <- read_csv('LaLonde_1986.csv')
###############################################################################
# Question 2: Implementing Least-Squares Estimators
# add necessary variables
df %<>% mutate(educ2 = educ*educ, blackXearn74 = black * earn74)
reg <- lm(earn78 ~ treat + black + age + educ + educ2 +
earn74 + blackXearn74 + u74 + u75, data = df)
# start table
q2 <- xtable(reg)
colnames(q2) <- c('coefficient', 'std_error', 't_stat', 'p_val')
# add confidence interval
q2$conf_int <-
paste0('[',round(q2$coefficient-1.96*q2$std_error,2),', ',
round(q2$coefficient+1.96*q2$std_error,2),']')
# round cols
xtable(q2)
###############################################################################
## Question 3: Analysis of Experiments
# 1) Neyman's Approach:
# 1a) ATE
N1 = sum(df$treat==1)
N0 = sum(df$treat==0)
sumY1 = sum(df$earn78[df$treat==1])
sumY0 = sum(df$earn78[df$treat==0])
Ybar1 = sumY1/N1
Ybar0 = sumY0/N0
ATE = Ybar1-Ybar0
# 1b) t-test
S1 = (1/(N1-1))*var(df$earn78[df$treat==1])
S0 = (1/(N0-1))*var(df$earn78[df$treat==0])
se <- sqrt(S1+S0)
Tstat = ATE / se
pval = 2*pnorm(-abs(Tstat))
CI_31b = paste0('[',round(ATE-1.96*sqrt(S1+S0),2),', '
,round(ATE+1.96*sqrt(S1+S0),2),']')
# Canned version for comparison
ttest <- t.test(earn78 ~ treat, data = df)
ttest
###############################################################################
# 2) Fisher's Approach
# a) p-Value
# Fisher
fisher_1 <- permTS(earn78 ~ treat, data = df,
alternative = 'two.sided', method = 'exact.mc',
control = permControl(nmc=999,p.conf.level=.95))
fisher_1
# Kolgomorov-Smirnov
earn78_0 <- df$earn78[df$treat==0]
earn78_1 <- df$earn78[df$treat==1]
ks.test(earn78_0, earn78_1, alternative = 'two.sided', exact = T)
# b) Confidence Interval
# Imputation assuming ATE is constant
# (Generating Yi(1) and Yi(0) for each i, assuming ATE estimate is constant)
Y1_imp <- (df$treat==1) * df$earn78 + (df$treat==0) * (df$earn78 + ATE)
Y0_imp <- (df$treat==1) * (df$earn78 - ATE) + (df$treat==0) * df$earn78
# define statistic (difference in means)
boot_T <- function(x, ind) {
mean(Y1_imp[df$treat[ind]==1]) - mean(Y0_imp[df$treat[ind]==0])
}
# run bootstrap using defined statistic
boot_results <- boot(df, R = 999, statistic = boot_T,
sim = "permutation", stype = "i")
# construct 95% confidence interval
CI_32b = paste0('[', quantile(boot_results$t,0.025), ', ',
quantile(boot_results$t,0.975), ']')
###############################################################################
# 3) Power Calculations
# a) deriving power function
# Z value for 95%
Z <- 1.96
# testing tau_0 = 0. plot tau on either side of 0
df_p <- data.frame(tau = seq(-2500, 2500, 25))
# calculate propability of rejection under each alternative tau
df_p %<>% mutate(prob_rej = pnorm(Z-tau/se, lower.tail=F) +
pnorm(Z+tau/se, lower.tail=F))
plot <- ggplot(df_p, aes(x = tau, y = prob_rej)) +
geom_point() + geom_smooth() +
ylab('Power') + xlab('tau') +
geom_hline(yintercept=0.05,linetype='dashed',color='red')
ggsave('power.png', plot)
View(df_p)
###############################################################################
# Author: Paul R. Organ
# Purpose: ECON 675, PS1
# last Update: Sept 17, 2018
###############################################################################
# Preliminaries
options(stringsAsFactors = F)
# packages
require(tidyverse)
require(magrittr)
require(xtable) # for table output
require(perm) # permutation tests
require(pwr) # power calculatoins
require(ggplot2) # plots
select = dplyr::select
setwd('C:/Users/prorgan/Box/Classes/Econ 675/Problem Sets/PS1')
###############################################################################
# read in data
df <- read_csv('LaLonde_1986.csv')
###############################################################################
# Question 2: Implementing Least-Squares Estimators
# add necessary variables
df %<>% mutate(educ2 = educ*educ, blackXearn74 = black * earn74)
reg <- lm(earn78 ~ treat + black + age + educ + educ2 +
earn74 + blackXearn74 + u74 + u75, data = df)
# start table
q2 <- xtable(reg)
colnames(q2) <- c('coefficient', 'std_error', 't_stat', 'p_val')
# add confidence interval
q2$conf_int <-
paste0('[',round(q2$coefficient-1.96*q2$std_error,2),', ',
round(q2$coefficient+1.96*q2$std_error,2),']')
# round cols
xtable(q2)
###############################################################################
## Question 3: Analysis of Experiments
# 1) Neyman's Approach:
# 1a) ATE
N1 = sum(df$treat==1)
N0 = sum(df$treat==0)
sumY1 = sum(df$earn78[df$treat==1])
sumY0 = sum(df$earn78[df$treat==0])
Ybar1 = sumY1/N1
Ybar0 = sumY0/N0
ATE = Ybar1-Ybar0
# 1b) t-test
S1 = (1/(N1-1))*var(df$earn78[df$treat==1])
S0 = (1/(N0-1))*var(df$earn78[df$treat==0])
se <- sqrt(S1+S0)
Tstat = ATE / se
pval = 2*pnorm(-abs(Tstat))
CI_31b = paste0('[',round(ATE-1.96*sqrt(S1+S0),2),', '
,round(ATE+1.96*sqrt(S1+S0),2),']')
# Canned version for comparison
ttest <- t.test(earn78 ~ treat, data = df)
ttest
###############################################################################
# 2) Fisher's Approach
# a) p-Value
# Fisher
fisher_1 <- permTS(earn78 ~ treat, data = df,
alternative = 'two.sided', method = 'exact.mc',
control = permControl(nmc=999,p.conf.level=.95))
fisher_1
# Kolgomorov-Smirnov
earn78_0 <- df$earn78[df$treat==0]
earn78_1 <- df$earn78[df$treat==1]
ks.test(earn78_0, earn78_1, alternative = 'two.sided', exact = T)
# b) Confidence Interval
# Imputation assuming ATE is constant
# (Generating Yi(1) and Yi(0) for each i, assuming ATE estimate is constant)
Y1_imp <- (df$treat==1) * df$earn78 + (df$treat==0) * (df$earn78 + ATE)
Y0_imp <- (df$treat==1) * (df$earn78 - ATE) + (df$treat==0) * df$earn78
# define statistic (difference in means)
boot_T <- function(x, ind) {
mean(Y1_imp[df$treat[ind]==1]) - mean(Y0_imp[df$treat[ind]==0])
}
# run bootstrap using defined statistic
boot_results <- boot(df, R = 999, statistic = boot_T,
sim = "permutation", stype = "i")
# construct 95% confidence interval
CI_32b = paste0('[', quantile(boot_results$t,0.025), ', ',
quantile(boot_results$t,0.975), ']')
###############################################################################
# 3) Power Calculations
# a) deriving power function
# Z value for 95%
Z <- 1.96
# testing tau_0 = 0. plot tau on either side of 0
df_p <- data.frame(tau = seq(-2500, 2500, 25))
# calculate propability of rejection under each alternative tau
df_p %<>% mutate(prob_rej = pnorm(Z-tau/se, lower.tail=F) +
pnorm(Z+tau/se, lower.tail=F))
plot <- ggplot(df_p, aes(x = tau, y = prob_rej)) +
geom_point() + geom_smooth() +
ylab('Power') + xlab('tau') +
geom_hline(yintercept=0.05,linetype='dashed',color='red')
ggsave('power_R.png', plot)
# b) determining minimum sample size
df_n <- data.frame(n = seq(100,5000,5))
# given: probablity of treatment is 2/3
p <- 2/3
# effect we want to detect
tau_0 <- 1000
# variances of observed data
V1 <- var(df$earn78[df$treat==1])
V0 <- var(df$earn78[df$treat==0])
# simulate with different sample sizes
df_n %<>% mutate(n1 = n*p,
n0 = n-n1,
std_err = sqrt(V1/n1 + V0/n0),
power = pnorm(Z-tau_0/std_err, lower.tail=F) +
pnorm(Z+tau_0/std_err, lower.tail=F))
# find sample size st power is at least .8
min_n <- min(df_n$n[df_n$power>=0.8])
###############################################################################
View(df_n)
CI_32b = paste0('[', quantile(boot_results$t,0.025), ', ',
quantile(boot_results$t,0.975), ']')
boot_results <- boot(df, R = 999, statistic = boot_T,
sim = "permutation", stype = "i")
?boot
require(boot) # bootstrapping
boot_T <- function(x, ind) {
mean(Y1_imp[df$treat[ind]==1]) - mean(Y0_imp[df$treat[ind]==0])
}
# run bootstrap using defined statistic
boot_results <- boot(df, R = 999, statistic = boot_T,
sim = "permutation", stype = "i")
# construct 95% confidence interval
CI_32b = paste0('[', quantile(boot_results$t,0.025), ', ',
quantile(boot_results$t,0.975), ']')
# run bootstrap using defined statistic
set.seed(22)
boot_results <- boot(df, R = 999, statistic = boot_T,
sim = "permutation", stype = "i")
# construct 95% confidence interval
CI_32b = paste0('[', quantile(boot_results$t,0.025), ', ',
quantile(boot_results$t,0.975), ']')
# run bootstrap using defined statistic
set.seed(77)
boot_results <- boot(df, R = 999, statistic = boot_T,
sim = "permutation", stype = "i")
# construct 95% confidence interval
CI_32b = paste0('[', quantile(boot_results$t,0.025), ', ',
quantile(boot_results$t,0.975), ']')
# run bootstrap using defined statistic
set.seed(1000)
boot_results <- boot(df, R = 999, statistic = boot_T,
sim = "permutation", stype = "i")
# construct 95% confidence interval
CI_32b = paste0('[', quantile(boot_results$t,0.025), ', ',
quantile(boot_results$t,0.975), ']')
